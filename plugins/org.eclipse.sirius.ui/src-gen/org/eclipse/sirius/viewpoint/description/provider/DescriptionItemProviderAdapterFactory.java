/*******************************************************************************
 * Copyright (c) 2007-2013 THALES GLOBAL SERVICES.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Obeo - initial API and implementation
 *******************************************************************************/
package org.eclipse.sirius.viewpoint.description.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.sirius.viewpoint.description.util.DescriptionAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The
 * adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class DescriptionItemProviderAdapterFactory extends DescriptionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this
     * adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement
     * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by
     * {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
     * -->
     * 
     * @generated
     */
    public DescriptionItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.Group} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected GroupItemProvider groupItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.Group}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createGroupAdapter() {
        if (groupItemProvider == null) {
            groupItemProvider = new GroupItemProvider(this);
        }

        return groupItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.Viewpoint} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ViewpointItemProvider viewpointItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.Viewpoint}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createViewpointAdapter() {
        if (viewpointItemProvider == null) {
            viewpointItemProvider = new ViewpointItemProvider(this);
        }

        return viewpointItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.DiagramDescription}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DiagramDescriptionItemProvider diagramDescriptionItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.DiagramDescription}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDiagramDescriptionAdapter() {
        if (diagramDescriptionItemProvider == null) {
            diagramDescriptionItemProvider = new DiagramDescriptionItemProvider(this);
        }

        return diagramDescriptionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.DiagramImportDescription}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DiagramImportDescriptionItemProvider diagramImportDescriptionItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.DiagramImportDescription}
     * . <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDiagramImportDescriptionAdapter() {
        if (diagramImportDescriptionItemProvider == null) {
            diagramImportDescriptionItemProvider = new DiagramImportDescriptionItemProvider(this);
        }

        return diagramImportDescriptionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.DiagramExtensionDescription}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DiagramExtensionDescriptionItemProvider diagramExtensionDescriptionItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.DiagramExtensionDescription}
     * . <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDiagramExtensionDescriptionAdapter() {
        if (diagramExtensionDescriptionItemProvider == null) {
            diagramExtensionDescriptionItemProvider = new DiagramExtensionDescriptionItemProvider(this);
        }

        return diagramExtensionDescriptionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.MetamodelExtensionSetting}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected MetamodelExtensionSettingItemProvider metamodelExtensionSettingItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.MetamodelExtensionSetting}
     * . <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createMetamodelExtensionSettingAdapter() {
        if (metamodelExtensionSettingItemProvider == null) {
            metamodelExtensionSettingItemProvider = new MetamodelExtensionSettingItemProvider(this);
        }

        return metamodelExtensionSettingItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.JavaExtension} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected JavaExtensionItemProvider javaExtensionItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.JavaExtension}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createJavaExtensionAdapter() {
        if (javaExtensionItemProvider == null) {
            javaExtensionItemProvider = new JavaExtensionItemProvider(this);
        }

        return javaExtensionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.NodeMapping} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected NodeMappingItemProvider nodeMappingItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.NodeMapping}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createNodeMappingAdapter() {
        if (nodeMappingItemProvider == null) {
            nodeMappingItemProvider = new NodeMappingItemProvider(this);
        }

        return nodeMappingItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.ContainerMapping}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ContainerMappingItemProvider containerMappingItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.ContainerMapping}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createContainerMappingAdapter() {
        if (containerMappingItemProvider == null) {
            containerMappingItemProvider = new ContainerMappingItemProvider(this);
        }

        return containerMappingItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.NodeMappingImport}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected NodeMappingImportItemProvider nodeMappingImportItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.NodeMappingImport}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createNodeMappingImportAdapter() {
        if (nodeMappingImportItemProvider == null) {
            nodeMappingImportItemProvider = new NodeMappingImportItemProvider(this);
        }

        return nodeMappingImportItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.ContainerMappingImport}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ContainerMappingImportItemProvider containerMappingImportItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.ContainerMappingImport}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createContainerMappingImportAdapter() {
        if (containerMappingImportItemProvider == null) {
            containerMappingImportItemProvider = new ContainerMappingImportItemProvider(this);
        }

        return containerMappingImportItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.EdgeMapping} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EdgeMappingItemProvider edgeMappingItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.EdgeMapping}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEdgeMappingAdapter() {
        if (edgeMappingItemProvider == null) {
            edgeMappingItemProvider = new EdgeMappingItemProvider(this);
        }

        return edgeMappingItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.EdgeMappingImport}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EdgeMappingImportItemProvider edgeMappingImportItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.EdgeMappingImport}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEdgeMappingImportAdapter() {
        if (edgeMappingImportItemProvider == null) {
            edgeMappingImportItemProvider = new EdgeMappingImportItemProvider(this);
        }

        return edgeMappingImportItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.DAnnotation} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DAnnotationItemProvider dAnnotationItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.DAnnotation}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDAnnotationAdapter() {
        if (dAnnotationItemProvider == null) {
            dAnnotationItemProvider = new DAnnotationItemProvider(this);
        }

        return dAnnotationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.ConditionalNodeStyleDescription}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ConditionalNodeStyleDescriptionItemProvider conditionalNodeStyleDescriptionItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.ConditionalNodeStyleDescription}
     * . <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createConditionalNodeStyleDescriptionAdapter() {
        if (conditionalNodeStyleDescriptionItemProvider == null) {
            conditionalNodeStyleDescriptionItemProvider = new ConditionalNodeStyleDescriptionItemProvider(this);
        }

        return conditionalNodeStyleDescriptionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.ConditionalEdgeStyleDescription}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ConditionalEdgeStyleDescriptionItemProvider conditionalEdgeStyleDescriptionItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.ConditionalEdgeStyleDescription}
     * . <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createConditionalEdgeStyleDescriptionAdapter() {
        if (conditionalEdgeStyleDescriptionItemProvider == null) {
            conditionalEdgeStyleDescriptionItemProvider = new ConditionalEdgeStyleDescriptionItemProvider(this);
        }

        return conditionalEdgeStyleDescriptionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.ConditionalContainerStyleDescription}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ConditionalContainerStyleDescriptionItemProvider conditionalContainerStyleDescriptionItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.ConditionalContainerStyleDescription}
     * . <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createConditionalContainerStyleDescriptionAdapter() {
        if (conditionalContainerStyleDescriptionItemProvider == null) {
            conditionalContainerStyleDescriptionItemProvider = new ConditionalContainerStyleDescriptionItemProvider(this);
        }

        return conditionalContainerStyleDescriptionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.OrderedTreeLayout}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected OrderedTreeLayoutItemProvider orderedTreeLayoutItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.OrderedTreeLayout}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createOrderedTreeLayoutAdapter() {
        if (orderedTreeLayoutItemProvider == null) {
            orderedTreeLayoutItemProvider = new OrderedTreeLayoutItemProvider(this);
        }

        return orderedTreeLayoutItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.CompositeLayout}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected CompositeLayoutItemProvider compositeLayoutItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.CompositeLayout}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createCompositeLayoutAdapter() {
        if (compositeLayoutItemProvider == null) {
            compositeLayoutItemProvider = new CompositeLayoutItemProvider(this);
        }

        return compositeLayoutItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.DecorationDescriptionsSet}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DecorationDescriptionsSetItemProvider decorationDescriptionsSetItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.DecorationDescriptionsSet}
     * . <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDecorationDescriptionsSetAdapter() {
        if (decorationDescriptionsSetItemProvider == null) {
            decorationDescriptionsSetItemProvider = new DecorationDescriptionsSetItemProvider(this);
        }

        return decorationDescriptionsSetItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.MappingBasedDecoration}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected MappingBasedDecorationItemProvider mappingBasedDecorationItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.MappingBasedDecoration}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createMappingBasedDecorationAdapter() {
        if (mappingBasedDecorationItemProvider == null) {
            mappingBasedDecorationItemProvider = new MappingBasedDecorationItemProvider(this);
        }

        return mappingBasedDecorationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.SemanticBasedDecoration}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected SemanticBasedDecorationItemProvider semanticBasedDecorationItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.SemanticBasedDecoration}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createSemanticBasedDecorationAdapter() {
        if (semanticBasedDecorationItemProvider == null) {
            semanticBasedDecorationItemProvider = new SemanticBasedDecorationItemProvider(this);
        }

        return semanticBasedDecorationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.Layer} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected LayerItemProvider layerItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.Layer}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createLayerAdapter() {
        if (layerItemProvider == null) {
            layerItemProvider = new LayerItemProvider(this);
        }

        return layerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.AdditionalLayer}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected AdditionalLayerItemProvider additionalLayerItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.AdditionalLayer}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createAdditionalLayerAdapter() {
        if (additionalLayerItemProvider == null) {
            additionalLayerItemProvider = new AdditionalLayerItemProvider(this);
        }

        return additionalLayerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.Customization} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected CustomizationItemProvider customizationItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.Customization}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createCustomizationAdapter() {
        if (customizationItemProvider == null) {
            customizationItemProvider = new CustomizationItemProvider(this);
        }

        return customizationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.VSMElementCustomization}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected VSMElementCustomizationItemProvider vsmElementCustomizationItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.VSMElementCustomization}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createVSMElementCustomizationAdapter() {
        if (vsmElementCustomizationItemProvider == null) {
            vsmElementCustomizationItemProvider = new VSMElementCustomizationItemProvider(this);
        }

        return vsmElementCustomizationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.VSMElementCustomizationReuse}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected VSMElementCustomizationReuseItemProvider vsmElementCustomizationReuseItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.VSMElementCustomizationReuse}
     * . <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createVSMElementCustomizationReuseAdapter() {
        if (vsmElementCustomizationReuseItemProvider == null) {
            vsmElementCustomizationReuseItemProvider = new VSMElementCustomizationReuseItemProvider(this);
        }

        return vsmElementCustomizationReuseItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.EAttributeCustomization}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EAttributeCustomizationItemProvider eAttributeCustomizationItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.EAttributeCustomization}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEAttributeCustomizationAdapter() {
        if (eAttributeCustomizationItemProvider == null) {
            eAttributeCustomizationItemProvider = new EAttributeCustomizationItemProvider(this);
        }

        return eAttributeCustomizationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.EReferenceCustomization}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EReferenceCustomizationItemProvider eReferenceCustomizationItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.EReferenceCustomization}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEReferenceCustomizationAdapter() {
        if (eReferenceCustomizationItemProvider == null) {
            eReferenceCustomizationItemProvider = new EReferenceCustomizationItemProvider(this);
        }

        return eReferenceCustomizationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.SystemColor} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected SystemColorItemProvider systemColorItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.SystemColor}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createSystemColorAdapter() {
        if (systemColorItemProvider == null) {
            systemColorItemProvider = new SystemColorItemProvider(this);
        }

        return systemColorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.InterpolatedColor}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected InterpolatedColorItemProvider interpolatedColorItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.InterpolatedColor}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createInterpolatedColorAdapter() {
        if (interpolatedColorItemProvider == null) {
            interpolatedColorItemProvider = new InterpolatedColorItemProvider(this);
        }

        return interpolatedColorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.ColorStep} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ColorStepItemProvider colorStepItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.ColorStep}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createColorStepAdapter() {
        if (colorStepItemProvider == null) {
            colorStepItemProvider = new ColorStepItemProvider(this);
        }

        return colorStepItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.FixedColor} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected FixedColorItemProvider fixedColorItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.FixedColor}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createFixedColorAdapter() {
        if (fixedColorItemProvider == null) {
            fixedColorItemProvider = new FixedColorItemProvider(this);
        }

        return fixedColorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.UserFixedColor}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected UserFixedColorItemProvider userFixedColorItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.UserFixedColor}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createUserFixedColorAdapter() {
        if (userFixedColorItemProvider == null) {
            userFixedColorItemProvider = new UserFixedColorItemProvider(this);
        }

        return userFixedColorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.Environment} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EnvironmentItemProvider environmentItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.Environment}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEnvironmentAdapter() {
        if (environmentItemProvider == null) {
            environmentItemProvider = new EnvironmentItemProvider(this);
        }

        return environmentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.SytemColorsPalette}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected SytemColorsPaletteItemProvider sytemColorsPaletteItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.SytemColorsPalette}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createSytemColorsPaletteAdapter() {
        if (sytemColorsPaletteItemProvider == null) {
            sytemColorsPaletteItemProvider = new SytemColorsPaletteItemProvider(this);
        }

        return sytemColorsPaletteItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.UserColorsPalette}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected UserColorsPaletteItemProvider userColorsPaletteItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.UserColorsPalette}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createUserColorsPaletteAdapter() {
        if (userColorsPaletteItemProvider == null) {
            userColorsPaletteItemProvider = new UserColorsPaletteItemProvider(this);
        }

        return userColorsPaletteItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.AnnotationEntry}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected AnnotationEntryItemProvider annotationEntryItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.AnnotationEntry}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createAnnotationEntryAdapter() {
        if (annotationEntryItemProvider == null) {
            annotationEntryItemProvider = new AnnotationEntryItemProvider(this);
        }

        return annotationEntryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.IdentifiedElement}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected IdentifiedElementItemProvider identifiedElementItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.IdentifiedElement}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createIdentifiedElementAdapter() {
        if (identifiedElementItemProvider == null) {
            identifiedElementItemProvider = new IdentifiedElementItemProvider(this);
        }

        return identifiedElementItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.ComputedColor} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ComputedColorItemProvider computedColorItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.ComputedColor}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createComputedColorAdapter() {
        if (computedColorItemProvider == null) {
            computedColorItemProvider = new ComputedColorItemProvider(this);
        }

        return computedColorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.viewpoint.description.DAnnotationEntry}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DAnnotationEntryItemProvider dAnnotationEntryItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.viewpoint.description.DAnnotationEntry}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDAnnotationEntryAdapter() {
        if (dAnnotationEntryItemProvider == null) {
            dAnnotationEntryItemProvider = new DAnnotationEntryItemProvider(this);
        }

        return dAnnotationEntryItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the
     * adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to
     * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
     * -->
     * 
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void dispose() {
        if (groupItemProvider != null)
            groupItemProvider.dispose();
        if (viewpointItemProvider != null)
            viewpointItemProvider.dispose();
        if (diagramDescriptionItemProvider != null)
            diagramDescriptionItemProvider.dispose();
        if (diagramImportDescriptionItemProvider != null)
            diagramImportDescriptionItemProvider.dispose();
        if (diagramExtensionDescriptionItemProvider != null)
            diagramExtensionDescriptionItemProvider.dispose();
        if (metamodelExtensionSettingItemProvider != null)
            metamodelExtensionSettingItemProvider.dispose();
        if (javaExtensionItemProvider != null)
            javaExtensionItemProvider.dispose();
        if (nodeMappingItemProvider != null)
            nodeMappingItemProvider.dispose();
        if (containerMappingItemProvider != null)
            containerMappingItemProvider.dispose();
        if (nodeMappingImportItemProvider != null)
            nodeMappingImportItemProvider.dispose();
        if (containerMappingImportItemProvider != null)
            containerMappingImportItemProvider.dispose();
        if (edgeMappingItemProvider != null)
            edgeMappingItemProvider.dispose();
        if (edgeMappingImportItemProvider != null)
            edgeMappingImportItemProvider.dispose();
        if (dAnnotationItemProvider != null)
            dAnnotationItemProvider.dispose();
        if (conditionalNodeStyleDescriptionItemProvider != null)
            conditionalNodeStyleDescriptionItemProvider.dispose();
        if (conditionalEdgeStyleDescriptionItemProvider != null)
            conditionalEdgeStyleDescriptionItemProvider.dispose();
        if (conditionalContainerStyleDescriptionItemProvider != null)
            conditionalContainerStyleDescriptionItemProvider.dispose();
        if (orderedTreeLayoutItemProvider != null)
            orderedTreeLayoutItemProvider.dispose();
        if (compositeLayoutItemProvider != null)
            compositeLayoutItemProvider.dispose();
        if (decorationDescriptionsSetItemProvider != null)
            decorationDescriptionsSetItemProvider.dispose();
        if (mappingBasedDecorationItemProvider != null)
            mappingBasedDecorationItemProvider.dispose();
        if (semanticBasedDecorationItemProvider != null)
            semanticBasedDecorationItemProvider.dispose();
        if (layerItemProvider != null)
            layerItemProvider.dispose();
        if (additionalLayerItemProvider != null)
            additionalLayerItemProvider.dispose();
        if (customizationItemProvider != null)
            customizationItemProvider.dispose();
        if (vsmElementCustomizationItemProvider != null)
            vsmElementCustomizationItemProvider.dispose();
        if (vsmElementCustomizationReuseItemProvider != null)
            vsmElementCustomizationReuseItemProvider.dispose();
        if (eAttributeCustomizationItemProvider != null)
            eAttributeCustomizationItemProvider.dispose();
        if (eReferenceCustomizationItemProvider != null)
            eReferenceCustomizationItemProvider.dispose();
        if (systemColorItemProvider != null)
            systemColorItemProvider.dispose();
        if (interpolatedColorItemProvider != null)
            interpolatedColorItemProvider.dispose();
        if (colorStepItemProvider != null)
            colorStepItemProvider.dispose();
        if (fixedColorItemProvider != null)
            fixedColorItemProvider.dispose();
        if (userFixedColorItemProvider != null)
            userFixedColorItemProvider.dispose();
        if (environmentItemProvider != null)
            environmentItemProvider.dispose();
        if (sytemColorsPaletteItemProvider != null)
            sytemColorsPaletteItemProvider.dispose();
        if (userColorsPaletteItemProvider != null)
            userColorsPaletteItemProvider.dispose();
        if (annotationEntryItemProvider != null)
            annotationEntryItemProvider.dispose();
        if (identifiedElementItemProvider != null)
            identifiedElementItemProvider.dispose();
        if (computedColorItemProvider != null)
            computedColorItemProvider.dispose();
        if (dAnnotationEntryItemProvider != null)
            dAnnotationEntryItemProvider.dispose();
    }

}
